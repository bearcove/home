#![allow(unused_imports)]
// This file is automatically @generated by dylo
// To regenerate, run `dylo gen` in the root of the workspace directory
// For more information, see https://github.com/bearcove/dylo
use futures_core::future::BoxFuture;
use libhttpclient::HttpClient;
use std::collections::HashSet;
use config::{RevisionConfig, TenantConfig, WebConfig};
use credentials::AuthBundle;
use eyre::Result;
use merde::CowStr;
#[derive(Debug, Clone)]
pub struct GitHubCallbackArgs<'s> {
    pub raw_query: CowStr<'s>,
}
merde::derive! {
    impl (Serialize, Deserialize) for struct GitHubCallbackArgs <'s > { raw_query }
}
#[derive(Debug, Clone)]
pub struct GitHubCallbackResponse<'s> {
    pub auth_bundle: AuthBundle<'s>,
    pub github_credentials: GitHubCredentials<'s>,
}
merde::derive! {
    impl (Serialize, Deserialize) for struct GitHubCallbackResponse <'s > { auth_bundle,
    github_credentials }
}
#[derive(Debug, Clone)]
pub struct GitHubCredentials<'s> {
    /// example: "ajba90sd098w0e98f0w9e8g90a8ed098wgfae_w"
    pub access_token: CowStr<'s>,
    /// example: "read:user"
    pub scope: CowStr<'s>,
    /// example: "bearer"
    pub token_type: Option<CowStr<'s>>,
}
merde::derive! {
    impl (Serialize, Deserialize) for struct GitHubCredentials <'s > { access_token,
    scope, token_type }
}
/// The purpose of the login (to determine the OAuth scopes needed for the login)
pub enum GitHubLoginPurpose {
    Admin,
    Regular,
}
/// Returns GitHub OAuth scopes needed for the login
pub fn github_login_purpose_to_scopes(purpose: &GitHubLoginPurpose) -> &'static str {
    match purpose {
        GitHubLoginPurpose::Admin => "read:user,read:org",
        GitHubLoginPurpose::Regular => "read:user",
    }
}
include!(".dylo/spec.rs");
include!(".dylo/support.rs");
