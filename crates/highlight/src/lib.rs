#![allow(unused_imports)]
// This file is automatically @generated by dylo
// To regenerate, run `dylo gen` in the root of the workspace directory
// For more information, see https://github.com/bearcove/dylo
include!(".dylo/spec.rs");
include!(".dylo/support.rs");
#[derive(Debug)]
pub enum Error {
    /// any error, tbh
    Any(String),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Any(s) => write!(f, "{s}"),
        }
    }
}
impl std::error::Error for Error {}
impl From<std::io::Error> for Error {
    fn from(value: std::io::Error) -> Self {
        Self::Any(value.to_string())
    }
}
impl From<String> for Error {
    fn from(value: String) -> Self {
        Self::Any(value)
    }
}
impl From<&'static str> for Error {
    fn from(value: &'static str) -> Self {
        Self::Any(value.to_string())
    }
}
pub type Result<T, E = Error> = std::result::Result<T, E>;
pub struct HighlightCodeParams<'a> {
    /// the code to highlight
    pub source: &'a str,
    /// something like "rust" or "go" â€” whatever was
    /// in the fenced code block. it can be empty.
    pub tag: &'a str,
    /// written as `data-bo`
    pub byte_offset: usize,
}
