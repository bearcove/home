#![allow(unused_imports)]
// This file is automatically @generated by dylo
// To regenerate, run `dylo gen` in the root of the workspace directory
// For more information, see https://github.com/bearcove/dylo
include!(".dylo/spec.rs");
include!(".dylo/support.rs");
use config::{RevisionConfig, TenantConfig, WebConfig};
use credentials::AuthBundle;
use eyre::Result;
use futures_core::future::BoxFuture;
use libhttpclient::{HttpClient, Uri};
use merde::CowStr;
use std::collections::HashSet;
#[derive(Debug, Clone)]
pub struct PatreonCredentials<'s> {
    pub access_token: CowStr<'s>,
    pub refresh_token: CowStr<'s>,
    pub expires_in: u32,
    pub scope: CowStr<'s>,
    pub token_type: Option<CowStr<'s>>,
    pub version: Option<CowStr<'s>>,
}
merde::derive! {
    impl (Serialize, Deserialize) for struct PatreonCredentials <'s > { access_token,
    refresh_token, expires_in, scope, token_type, version }
}
pub fn test_patreon_renewal() -> bool {
    std::env::var("TEST_PATREON_RENEWAL").is_ok()
}
#[derive(Debug, Clone, Copy)]
pub enum ForcePatreonRefresh {
    DontForceRefresh,
    ForceRefresh,
}
pub trait PatreonStore: Send + Sync + 'static {
    fn fetch_patreon_credentials(
        &self,
        patreon_id: &str,
    ) -> Result<Option<PatreonCredentials<'static>>>;
    fn save_patreon_credentials(
        &self,
        patreon_id: &str,
        credentials: &PatreonCredentials,
    ) -> Result<()>;
}
#[derive(Debug, Clone)]
pub struct PatreonCallbackArgs<'s> {
    pub raw_query: CowStr<'s>,
}
merde::derive! {
    impl (Serialize, Deserialize) for struct PatreonCallbackArgs <'s > { raw_query }
}
#[derive(Debug, Clone)]
pub struct PatreonCallbackResponse<'s> {
    pub auth_bundle: AuthBundle<'s>,
}
merde::derive! {
    impl (Serialize, Deserialize) for struct PatreonCallbackResponse <'s > { auth_bundle
    }
}
#[derive(Debug, Clone)]
pub struct PatreonRefreshCredentialsArgs<'s> {
    pub patreon_id: CowStr<'s>,
}
merde::derive! {
    impl (Serialize, Deserialize) for struct PatreonRefreshCredentialsArgs <'s > {
    patreon_id }
}
#[derive(Debug, Clone)]
pub struct PatreonRefreshCredentials<'s> {
    pub auth_bundle: AuthBundle<'s>,
}
merde::derive! {
    impl (Serialize, Deserialize) for struct PatreonRefreshCredentials <'s > {
    auth_bundle }
}
