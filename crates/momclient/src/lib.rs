#![allow(unused_imports)]
// This file is automatically @generated by dylo
// To regenerate, run `dylo gen` in the root of the workspace directory
// For more information, see https://github.com/bearcove/dylo
include!(".dylo/spec.rs");
include!(".dylo/support.rs");
use config::{MOM_DEV_API_KEY, MomApiKey, production_mom_url};
use futures_core::future::BoxFuture;
use std::str::FromStr;
use httpclient::{HeaderMap, HeaderValue, Uri, header::self};
use bytes::Bytes;
use conflux::RevisionIdRef;
use credentials::AuthBundle;
use libgithub::{GitHubCallbackArgs, GitHubCallbackResponse};
#[allow(unused_imports)]
use mom::{
    ListMissingArgs, ListMissingResponse, MomEvent,
    media_types::{
        HeadersMessage, TranscodeEvent, TranscodingProgress, UploadDoneMessage,
        WebSocketMessage,
    },
};
use objectstore::ObjectStoreKeyRef;
use patreon::{
    PatreonCallbackArgs, PatreonCallbackResponse, PatreonRefreshCredentials,
    PatreonRefreshCredentialsArgs,
};
pub trait MomEventListener: Send + 'static {
    fn on_event<'fut>(&'fut self, event: MomEvent<'static>) -> BoxFuture<'fut, ()>;
}
pub type Result<T, E = noteyre::BS> = std::result::Result<T, E>;
/// Configuration for a Mom client.
///
/// Contains the base URL of the Mom server and the API key required for authentication.
#[derive(Clone)]
pub struct MomClientConfig {
    /// The base URL of the Mom server.
    pub base_url: String,
    /// The API key used to authenticate with the Mom server.
    pub api_key: Option<MomApiKey>,
}
impl MomClientConfig {
    /// Creates a new `MomClientConfig` with the given base URL and API key.
    pub fn api_key(&self) -> MomApiKey {
        self.api_key
            .clone()
            .unwrap_or_else(|| {
                eprintln!("==================================================");
                eprintln!("=                                                =");
                eprintln!("=      WARNING: set $MOM_API_KEY to something    =");
                eprintln!("=      real to deploy                            =");
                eprintln!("=                                                =");
                eprintln!("==================================================");
                MOM_DEV_API_KEY.to_owned()
            })
    }
}
pub trait TranscodingEventListener: Send + Sync + 'static {
    fn on_transcoding_event(&self, ev: TranscodeEvent) -> BoxFuture<'_, Result<()>>;
}
pub trait ChunkReceiver: Send + Sync {
    fn on_chunk(&mut self, chunk: Vec<u8>) -> BoxFuture<'_, Result<()>>;
}
