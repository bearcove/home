// This file is automatically @generated by dylo
// To regenerate, run `dylo gen` in the root of the workspace directory
// For more information, see https://github.com/bearcove/dylo
pub trait Mod: Send + Sync + 'static {
    fn client(&self) -> Box<dyn HttpClient>;
    fn client_with_opts(&self, opts: ClientOpts) -> Box<dyn HttpClient>;
}
pub trait HttpClient: Send + Sync + 'static {
    fn request(&self, method: Method, uri: Uri) -> Box<dyn RequestBuilder>;
    fn get(&self, uri: Uri) -> Box<dyn RequestBuilder>;
    fn post(&self, uri: Uri) -> Box<dyn RequestBuilder>;
    fn put(&self, uri: Uri) -> Box<dyn RequestBuilder>;
    fn delete(&self, uri: Uri) -> Box<dyn RequestBuilder>;
}
pub trait RequestBuilder: Send + Sync + 'static {
    fn body(self: Box<Self>, body: Bytes) -> Box<dyn RequestBuilder>;
    fn form(self: Box<Self>, form: String) -> Box<dyn RequestBuilder>;
    fn header(
        self: Box<Self>,
        key: HeaderName,
        value: HeaderValue,
    ) -> Box<dyn RequestBuilder>;
    /// Sets a "polite" user agent, letting the server know where to reach us.
    fn polite_user_agent(self: Box<Self>) -> Box<dyn RequestBuilder>;
    /// Sets a browser-like user agent
    fn browser_like_user_agent(self: Box<Self>) -> Box<dyn RequestBuilder>;
    fn basic_auth(
        self: Box<Self>,
        username: &str,
        password: Option<&str>,
    ) -> Box<dyn RequestBuilder>;
    fn bearer_auth(self: Box<Self>, token: &str) -> Box<dyn RequestBuilder>;
    fn send(self: Box<Self>) -> BoxFuture<'static, Result<Box<dyn Response>, Error>>;
    fn send_and_expect_200(
        self: Box<Self>,
    ) -> BoxFuture<'static, Result<Box<dyn Response>, Error>>;
    fn json(
        self: Box<Self>,
        body: &dyn DynSerialize,
    ) -> Result<Box<dyn RequestBuilder>, MerdeError<'static>>;
    fn query(self: Box<Self>, params: &[(&str, &str)]) -> Box<dyn RequestBuilder>;
}
pub trait Response: Send + Sync + 'static {
    fn status(&self) -> StatusCode;
    fn headers_only_string_safe(&self) -> HashMap<String, String>;
    fn bytes(self: Box<Self>) -> BoxFuture<'static, Result<Vec<u8>, Error>>;
    fn bytes_stream(self: Box<Self>) -> BoxStream<'static, Result<Bytes, Error>>;
    fn text(self: Box<Self>) -> BoxFuture<'static, Result<String, Error>>;
}
