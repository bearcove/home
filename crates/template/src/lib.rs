#![allow(unused_imports)]
// This file is automatically @generated by dylo
// To regenerate, run `dylo gen` in the root of the workspace directory
// For more information, see https://github.com/bearcove/dylo
include!(".dylo/spec.rs");
include!(".dylo/support.rs");
use std::{
    collections::{HashMap, HashSet},
    sync::Arc,
};
use config::WebConfig;
use conflux::{InputPath, LoadedPage, RevisionView, RouteRef};
use credentials::UserInfo;
use mom::GlobalStateView;
use noteyre::eyre;
use search::Index;
#[derive(Default)]
pub struct CompileArgs {
    pub templates: HashMap<String, String>,
}
#[derive(PartialEq, Eq, Debug)]
pub struct Shortcode<'a> {
    pub name: &'a str,
    pub body: Option<&'a str>,
    pub args: DataObject,
}
pub fn shortcode_name_to_input_path(name: &str) -> InputPath {
    format!("/templates/shortcodes/{name}.html.jinja").into()
}
pub struct RenderShortcodeResult {
    /// for dependency tracking
    pub shortcode_input_path: InputPath,
    /// for dependency tracking
    pub assets_looked_up: HashSet<InputPath>,
}
impl TemplateCollection for () {
    fn render_template_to(
        &self,
        _w: &mut dyn std::io::Write,
        _args: RenderTemplateArgs<'_>,
    ) -> noteyre::Result<()> {
        Err(eyre!("no template collection"))
    }
    fn render_shortcode_to(
        &self,
        _w: &mut dyn std::io::Write,
        _args: Shortcode<'_>,
        _rv: Arc<dyn RevisionView>,
        _web: WebConfig,
    ) -> noteyre::Result<RenderShortcodeResult> {
        Err(eyre!("no template collection"))
    }
}
