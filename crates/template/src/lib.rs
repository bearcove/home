#![allow(unused_imports)]
// This file is automatically @generated by dylo
// To regenerate, run `dylo gen` in the root of the workspace directory
// For more information, see https://github.com/bearcove/dylo
include!(".dylo/spec.rs");
include!(".dylo/support.rs");
use std::{
    collections::{HashMap, HashSet},
    sync::Arc,
};
use config::WebConfig;
use conflux::{InputPath, LoadedPage, RevisionView, RouteRef};
use credentials::UserInfo;
use mom::GlobalStateView;
use noteyre::eyre;
use search::Index;
#[derive(Default)]
pub struct CompileArgs {
    pub templates: HashMap<String, String>,
}
pub struct RenderTemplateArgs<'a> {
    pub template_name: &'a str,
    /// URL structure:
    /// +-------------------------+---+-------------------+
    /// | /articles/foo           | ? | bar=baz&qux=quux  |
    /// +-------------------------+---+-------------------+
    /// | Path                    |   | Raw Query         |
    /// +-------------------------+---+-------------------+
    pub path: &'a RouteRef,
    pub raw_query: &'a str,
    /// Revision bundle
    pub rv: Arc<dyn RevisionView>,
    /// Global state view
    pub gv: Arc<dyn GlobalStateView>,
    /// Search index
    pub index: Arc<dyn Index>,
    /// Page we're rendering (optional)
    pub page: Option<Arc<LoadedPage>>,
    /// Gotten from cookies
    pub user_info: Option<UserInfo<'static>>,
    /// Web configuration
    pub web: WebConfig,
    /// Additional globals
    pub additional_globals: DataObject,
}
#[derive(PartialEq, Eq, Debug)]
pub struct Shortcode<'a> {
    pub name: &'a str,
    pub body: Option<&'a str>,
    pub args: DataObject,
}
pub type DataObject = HashMap<String, DataValue>;
#[derive(PartialEq, Eq, Debug)]
pub enum DataValue {
    String(String),
    Number(i32),
    Boolean(bool),
}
impl<'a> From<&'a str> for DataValue {
    fn from(s: &'a str) -> Self {
        Self::String(s.to_owned())
    }
}
impl From<String> for DataValue {
    fn from(s: String) -> Self {
        Self::String(s)
    }
}
impl From<i32> for DataValue {
    fn from(n: i32) -> Self {
        Self::Number(n)
    }
}
impl From<bool> for DataValue {
    fn from(b: bool) -> Self {
        Self::Boolean(b)
    }
}
pub fn shortcode_name_to_input_path(name: &str) -> InputPath {
    format!("/templates/shortcodes/{name}.html.jinja").into()
}
pub struct RenderShortcodeResult {
    /// for dependency tracking
    pub shortcode_input_path: InputPath,
    /// for dependency tracking
    pub assets_looked_up: HashSet<InputPath>,
}
impl TemplateCollection for () {
    fn render_template_to(
        &self,
        _w: &mut dyn std::io::Write,
        _args: RenderTemplateArgs<'_>,
    ) -> noteyre::Result<()> {
        Err(eyre!("no template collection"))
    }
    fn render_shortcode_to(
        &self,
        _w: &mut dyn std::io::Write,
        _args: Shortcode<'_>,
        _rv: Arc<dyn RevisionView>,
        _web: WebConfig,
    ) -> noteyre::Result<RenderShortcodeResult> {
        Err(eyre!("no template collection"))
    }
}
