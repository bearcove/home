// This file is automatically @generated by dylo
// To regenerate, run `dylo gen` in the root of the workspace directory
// For more information, see https://github.com/bearcove/dylo
pub trait Mod: Send + Sync + 'static {
    fn client(
        &'static self,
        mcc: MomClientConfig,
    ) -> BoxFuture<'static, Result<Box<dyn MomClient>>>;
    fn subscribe_to_mom_events(
        &'static self,
        ev_listener: Box<dyn MomEventListener>,
        mcc: MomClientConfig,
    ) -> BoxFuture<'static, Result<()>>;
}
pub trait MomClient: Send + Sync + 'static {
    fn mom_tenant_client(
        &self,
        tenant_name: config::TenantDomain,
    ) -> Box<dyn MomTenantClient>;
}
pub trait MomTenantClient: Send + Sync + 'static {
    fn update_auth_bundle<'fut>(
        &'fut self,
        body: &'fut AuthBundle<'static>,
    ) -> BoxFuture<'fut, Result<AuthBundle<'static>>>;
    fn github_callback<'fut>(
        &'fut self,
        body: &'fut GitHubCallbackArgs<'static>,
    ) -> BoxFuture<'fut, Result<Option<GitHubCallbackResponse<'static>>>>;
    fn patreon_callback<'fut>(
        &'fut self,
        body: &'fut PatreonCallbackArgs<'static>,
    ) -> BoxFuture<'fut, Result<Option<PatreonCallbackResponse<'static>>>>;
    fn patreon_refresh_credentials<'fut>(
        &'fut self,
        body: &'fut PatreonRefreshCredentialsArgs<'static>,
    ) -> BoxFuture<'fut, Result<PatreonRefreshCredentials<'static>>>;
    fn objectstore_list_missing<'fut>(
        &'fut self,
        body: &'fut ListMissingArgs,
    ) -> BoxFuture<'fut, Result<ListMissingResponse>>;
    fn put_asset<'fut>(
        &'fut self,
        key: &'fut ObjectStoreKeyRef,
        payload: Bytes,
    ) -> BoxFuture<'fut, Result<()>>;
    fn put_revpak<'fut>(
        &'fut self,
        id: &'fut RevisionIdRef,
        payload: Bytes,
    ) -> BoxFuture<'fut, Result<()>>;
    fn media_transcode(
        &self,
        params: mom::TranscodeParams,
    ) -> BoxFuture<'_, Result<mom::TranscodeResponse>>;
    fn derive(
        &self,
        params: mom::DeriveParams,
    ) -> BoxFuture<'_, Result<mom::DeriveResponse>>;
    fn media_uploader(
        &self,
        listener: Box<dyn TranscodingEventListener>,
    ) -> BoxFuture<'_, Result<Box<dyn MediaUploader>>>;
}
pub trait MediaUploader: Send + 'static {
    fn with_headers(&mut self, headers: HeadersMessage) -> BoxFuture<'_, Result<()>>;
    fn upload_chunk(&mut self, chunk: Bytes) -> BoxFuture<'_, Result<()>>;
    fn done_and_download_result<'a>(
        &'a mut self,
        uploaded_size: usize,
        chunk_receiver: Box<dyn ChunkReceiver + 'a>,
    ) -> BoxFuture<'a, Result<()>>;
}
