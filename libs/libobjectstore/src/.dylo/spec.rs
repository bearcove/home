// This file is automatically @generated by dylo
// To regenerate, run `dylo gen` in the root of the workspace directory
// For more information, see https://github.com/bearcove/dylo
pub trait Mod: Send + Sync + 'static {
    fn s3(
        &self,
        config: &ObjectStorageConfig,
        secrets: &AwsSecrets,
    ) -> Result<Arc<dyn ObjectStore>>;
    fn local_disk_with_prefix(&self, prefix: &str) -> Result<Arc<dyn ObjectStore>>;
    fn in_memory(&self) -> Arc<dyn ObjectStore>;
    fn layered(
        &self,
        stores: Vec<(String, Arc<dyn ObjectStore>)>,
    ) -> Arc<dyn ObjectStore>;
}
pub trait ObjectStore: Send + Sync + 'static {
    fn put_opts(
        &self,
        key: &ObjectStoreKeyRef,
        payload: Bytes,
        opts: PutOptions,
    ) -> BoxFuture<'_, Result<PutResult>>;
    fn put_multipart_opts(
        &self,
        key: &ObjectStoreKeyRef,
        payload: PutMultipartOpts,
    ) -> BoxFuture<'_, Result<Box<dyn MultipartUpload>>>;
    fn get_opts(
        &self,
        key: &ObjectStoreKeyRef,
        opts: GetOptions,
    ) -> BoxFuture<'_, Result<Box<dyn GetResult>>>;
    fn desc(&self) -> String;
}
pub trait MultipartUpload: Send + 'static {
    fn put_part(&mut self, data: Bytes) -> BoxFuture<'static, Result<()>>;
    fn complete(self) -> BoxFuture<'static, Result<PutResult>>;
}
pub trait GetResult: Send + 'static {
    fn size(&self) -> usize;
    fn range(&self) -> std::ops::Range<usize>;
    fn content_type(&self) -> Option<&str>;
    fn bytes(self: Box<Self>) -> BoxFuture<'static, Result<Bytes>>;
    fn into_stream(self: Box<Self>) -> BoxStream<'static, Result<Bytes>>;
}
